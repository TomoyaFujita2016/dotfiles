# color scheme
[[plugins]]
repo  = 'sjl/badwolf'
hook_add = '''
    colorscheme badwolf
'''

# dein
[[plugins]]
repo = 'Shougo/dein.vim'

repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {'colorscheme': 'wombat'}
'''

# Toml
[[plugins]]
repo  = 'cespare/vim-toml'

# undoリスト
[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
if has("persistent_undo")
   " ファイルを閉じてもUndo記録を残す
    set undodir=~/.cache/.undodir/
    set undofile
endif
let g:undotree_WindowLayout = 2         " undotreeは左側/diffは下にウィンドウ幅で表示
let g:undotree_ShortIndicators = 1      " 時間単位は短く表示
let g:undotree_SplitWidth = 30          " undotreeのウィンドウ幅
let g:undotree_SetFocusWhenToggle = 1   " undotreeを開いたらフォーカスする
"let g:undotree_DiffAutoOpen = 0         " diffウィンドウは起動時無効
let g:undotree_DiffpanelHeight = 8      " diffウィンドウの行数
"let g:undotree_HighlightChangedText = 0 " 変更箇所のハイライト無効
" undotreeをトグル表示
noremap <Leader>u :UndotreeToggle<CR>

" undotreeバッファ内でのキーバインド設定
function! g:Undotree_CustomMap()
    map <silent> <buffer> <Esc> q
    map <silent> <buffer> h ?
endfunction
'''

# lint tool
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_linters = {
    \ 'python': ['flake8', 'mypy'],
    \ 'html': [],
    \ 'css': ['stylelint'],
    \ 'javascript': ['eslint'],
    \ 'vue': ['eslint', 'vls']
    \ }
let g:ale_fixers = {
    \ '*': ['remove_trailing_lines', 'trim_whitespace'],
    \ 'python': ['autopep8', 'black'],
    \ 'javascript': ['eslint'],
    \ }


"行頭のマークが出る部分を常に表示するようにする
let g:ale_sign_column_always = 1

"ファイル保存時に整形実行
let g:ale_fix_on_save = 1

" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass

" Ctrl + jで次の指摘へ、Ctrl + kで前の指摘へ移動
nmap <silent> <C-J> <Plug>(ale_previous_wrap)
nmap <silent> <C-K> <Plug>(ale_next_wrap)

let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8 --ignore=I201'
let g:ale_python_mypy_executable = g:python3_host_prog
let g:ale_python_mypy_options = '-m mypy'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'
'''

# nerdtree
[[plugins]]
repo = 'preservim/nerdtree'

# nerdtreeをtab間で共有できるやつ
[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
nmap <C-n> :NERDTreeTabsToggle<CR>
let g:airline#extensions#tabline#enabled = 1
'''

# icon
[[plugins]]
repo = 'ryanoasis/vim-devicons'



[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  let g:airline#extensions#branch#enabled = 1
  nnoremap [fugitive]  <Nop>
  nmap <space>g [fugitive]
  nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
  nnoremap <silent> [fugitive]a :Gwrite<CR>
  nnoremap <silent> [fugitive]c :Gcommit-v<CR>
  nnoremap <silent> [fugitive]b :Gblame<CR>
  nnoremap <silent> [fugitive]p :Gpull<CR>
  nnoremap <silent> [fugitive]d :Gdiff<CR>
  nnoremap <silent> [fugitive]m :Gmerge<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'


[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_cmd = [
    'Files',
    'ProjectFiles',
    'Buffers',
    'BLines',
    'History',
    'Tags',
    'BTags',
    'GFiles',
    'Ag',
]
hook_add = '''
  fun! FzfOmniFiles()
    let is_git = system('git status')
    if v:shell_error
      :Files
    else
      :GFiles
    endif
  endfun
  nnoremap <C-p> :call FzfOmniFiles()<CR>

  " Ctrl+gで文字列検索を開く
  " <S-?>でプレビューを表示/非表示する
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 3..'}, 'up:60%')
  \ : fzf#vim#with_preview({'options': '--exact --delimiter : --nth 3..'}, 'right:50%:hidden', '?'),
  \ <bang>0)
  nnoremap <C-g> :Rg<CR>

  " frでカーソル位置の単語をファイル検索する
  nnoremap fr vawy:Rg <C-R>"<CR>
  " frで選択した単語をファイル検索する
  xnoremap fr y:Rg <C-R>"<CR>

  " fbでバッファ検索を開く
  nnoremap fb :Buffers<CR>
  " fpでバッファの中で1つ前に開いたファイルを開く
  nnoremap fp :Buffers<CR><CR>
  " flで開いているファイルの文字列検索を開く
  nnoremap fl :BLines<CR>
  " fmでマーク検索を開く
  nnoremap fm :Marks<CR>
  " fhでファイル閲覧履歴検索を開く
  nnoremap fh :History<CR>
  " fcでコミット履歴検索を開く
  nnoremap fc :Commits<CR>

  autocmd VimEnter * nnoremap <silent><expr><C-P> (expand('%') =~ 'NERD_tree' ? "\<C-W>\<C-W>" : '').":Files<CR>"
  autocmd VimEnter * nnoremap <silent><expr><leader>F (expand('%') =~ 'NERD_tree' ? "\<C-W>\<C-W>" : '').':Files'.(!empty(expand('<cword>')) ? '--query='.expand('<cword>') : '').'<CR>'
'''

# 補完
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
  let g:coc_global_extensions = [
      \ 'coc-lists',
      \ 'coc-json',
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-jedi',
      \ ]
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gr <Plug>(coc-references)
  nmap <Leader>f [fzf-p]
  xmap <Leader>f [fzf-p]
'''

[[plugins]]
repo = 'ervandew/supertab'

[[plugins]]
repo = 'heerun/vim-polyglot'

# シンタックスハイライト命
[[plugins]]
repo = 'vim-python/python-syntax'
hook_add = '''
    let g:python_highlight_all = 1
'''

# clip
[[plugins]]
repo = 'svermeulen/vim-easyclip'
hook_add = '''
    " クリップボードにコピーしたものを履歴として残す。vim再起動時に復元
    let g:EasyClipShareYanks = 1
    " easycilpからコピーした一覧を取得
    function! s:yank_list()
      redir => ys
      silent Yanks
      redir END
      return split(ys, '\n')[1:]
    endfunction

    " 引数からPasteコマンドで貼り付け
    function! s:yank_handler(reg)
      if empty(a:reg)
        echo "aborted register paste"
      else
        let token = split(a:reg, ' ')
        execute 'Paste' . token[0]
      endif
    endfunction

    " fzfを使って一覧を呼び出して貼り付け
    command! FZFYank call fzf#run({
    \ 'source': <sid>yank_list(),
    \ 'sink': function('<sid>yank_handler'),
    \ 'options': '-m --prompt="FZFYank> "',
    \ 'down':    '40%'
    \ })

    nnoremap <C-Y><C-Y> :<C-U>FZFYank<CR>
    inoremap <C-Y><C-Y> <C-O>:<C-U>FZFYank<CR>
'''

[[plugins]]
repo = 'fisadev/vim-isort'
on_ft = ['python']
hook_add = '''
    augroup auto_style
      autocmd!
      autocmd bufWritePost *.py :Isort
    augroup END
'''
